<!doctype html>
<html lang="en">

  <head>
    <meta charset="utf-8">

    <title>Sinatra Sings -- an introduction to micro web frameworks</title>

    <!--
    <meta name="description" content="A framework for easily creating beautiful presentations using HTML">
    <meta name="author" content="Hakim El Hattab">
    -->

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <link rel="stylesheet" href="css/reveal.css">
    <link rel="stylesheet" href="css/theme/simple.css" id="theme">

    <!-- For syntax highlighting -->
    <link rel="stylesheet" href="lib/css/zenburn.css">

    <!-- If the query includes 'print-pdf', use the PDF print sheet -->
    <script>
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    </script>

    <!--[if lt IE 9]>
    <script src="lib/js/html5shiv.js"></script>
    <![endif]-->
  </head>

  <body>

    <div class="reveal">

      <!-- Any section ielement inside of this container is displayed as a slide -->
      <div class="slides">


        <section>
	  <p class="fragment">
	    Carlo Flores
	  </p>
	  <p>
            <a href="http://edgecast.com" class="fragment">EdgeCast Networks</a>
          </p>
          <p>
            <a href="http://ladevops.org" class="fragment">LA DevOps</a>
          </p>
          <p>
            <a href="http://js.la" class="fragment">js.la</a>
          </p>
	</section>
	<section>
	  <p>
	    grab this presentation at<br/>
	    <a href="http://contact.rota.la/preso">contact.rota.la</a>
	  </p>
	  <p>
	    grab code examples at<br/>
	    <a href="https://github.com/flores/myway">github.com/flores/myway</a>
	  </p>
	</section>
        
	<section>
          <h2>Sinatra</h2>
	</section>

	<section>
	  <h2>How to build big programs:</h2>
	  <p class="fragment">
	    <strong>don't build big programs</strong>
	    <p> - <a href="https://github.com/substack">@substack</a></p>
	  </p>
	</section>
	<section>
	  <p>Things should be easy</p>
	  <p class="fragment">so we stay motivated to make lots of things</p>
	  <p class="fragment">so other people can maintain our things</p>
	  <p class="fragment">so we try out our ideas faster</p>
	</section>
	
	<section>
	  <section>
            <h2>Perl</h2>
	    <p class="fragment">install perl</p>	
	    <p class="fragment">install some web server (Apache)</p>	
	    <p class="fragment">install mod perl, configure web server</p>	
	    <p class="fragment">install perl cgi and stuff</p>	
	  </section>
	  <section>
	    <p><img src="/img/N36mMWf.gif" alt="kitten jump fail"/></p>	
	  </section>	    
	  
	  <section>
            <h2>Ruby on Rails</h2>
	    <p class="fragment">install ruby/rubygems</p>	
	    <p class="fragment">install rails</p>	
	    <p class="fragment">explodify rails (rails new ...)</p>	
	    <p class="fragment">bagillionty directories</p>
	  </section>
        
	  <section>
	  <p><img src="/img/anigif_enhanced-buzz-12810-1366465643-2.gif" 
	    alt="fuck this fuck that"/></p>	
	  </section>	    
       </section>

	<section>
	  <h2>Micro web frameworks!</h2>
	</section>

	<section>
	  <section>
	    What do we want?
	  </section>
          <section>
	    Handle HTTP methods
	    <p class="fragment">GET</p>
	    <p class="fragment">POST</p>
	    <p class="fragment">PUT</p>
	    <p class="fragment">DELETE</p>
	    <p class="fragment">OPTIONS, HEAD, TRACE...</p>
	  </section>
          <section>
	    Be easy to respond to requests by some user
	  </section>
	</section>
	
	<section>
	  <section>
	    The coolest hello world ever
	  </section>
	  <section>
            <h2><a href="http://sinatrarb.com">Sinatra.rb</a></h2>  
	      <p class="fragment">install ruby</p>
	      <p class="fragment">install sinatra (gem install sinatra)</p>
	  </section>
	  <section>
	    <p><img src="/img/1297064511_11.gif" alt="maru success"/></p>	
	  </section>
	  <section>
	    <pre><code data-trim>
require 'sinatra.rb'
		
get '/' do
  "Hello world"
end
	    </code></pre>
	  </section>
	</section>

	<section>
	  <section>
	    Routes!
	  </section>

	  <section>
	    <pre><code data-trim>
require 'sinatra.rb'
		
get '/' do
  "Hello world"
end

get '/hello/:name' do
  "Hello " + params[:name]
end
	    </code></pre>

	  </section>

	  <section>
	    Logic!
	  </section>	  
	  
	  <section>
	    <pre><code data-trim>
require 'sinatra.rb'

def check_if_carlo(name)
  if name == 'carlo'
    return true
  else
    return false
  end
end

get '/' do
  "Hello world"
end

get '/hello/:name' do
  name = params[:name]
  if check_if_carlo(name)
    "Hey " + name + ", I know you!"
  else
    "Hello " + name
  end
end
	    </code></pre>
	
	  </section>
	  
	  <section>
	    <img src="/img/tumblr_lzrs23ZiLu1qidarg.gif" alt="sweet jesus mother of god"/>
	  </section>
	  
	  <section>
	    Make these <a href="https://github.com/flores/myway/tree/master/examples">examples</a> better!
	  </section>

	</section>

	<section>
	  <section>
	    <h2>Some stupid 30 minute (and more) projects</h2>
	  </section>
	</section>

	<section>
	  <section>
	    <h2>A contact form</h2>
	  </section>

	  <section>
	    use erb (templating, native)
	    <p class="fragment">install aws-ses (cheap emailing)*<br/>
	      * requires an Amazon Web Services account</p>
	    <p class="fragment">install sanitize (optional)</p>
	  </section>

	  <section>
	    erb templates
	    <p class="fragment">we use a layout for consistent elements
	      on a page</p>
	    <p class="fragment">we'll insert route specific items into that
	      layout</p>
	  </section>

	  <section>
	    views/layout.erb
	    <pre><code data-trim>
&lt;html>
  &lt;head>
    &lt;title>my contact form!&lt;/title>
  &lt;/head>

  &lt;body>
    &lt;strong>email me&lt;/strong>
    &lt;%= yield %>
  &lt;/body>
&lt;/html>
	    </code></pre>
	  </section>

	  <section>
	    views/contact.erb
	    <pre><code data-trim>
&lt;form action='/contact' method='post'>
  &lt;p>
    &lt;label>name:&lt;/label> 
    &lt;input class='text' name='name' type='text' /> 
  &lt;/p> 
  
  &lt;p>
    &lt;label>email:&lt;/label> 
    &lt;input class='text' name='mail' type='text' /> 
  &lt;/p> 
  
  &lt;p>
    &lt;label>subject:&lt;/label> 
    &lt;input class='text' name='subject' type='text' /> 
  &lt;/p> 
  
  &lt;p>
    &lt;label>message:&lt;/label> 
    &lt;textarea name='body'>&lt;/textarea> 
  &lt;/p> 
  
  &lt;p>
    &lt;input id='submit' type='submit' value='send' /> 
  &lt;/p> 
&lt;form>	    
	    </code></pre>
	  </section>
	  
	  <section>
	    and our app.rb
	    <pre><code data-trim>
require 'sinatra.rb'
require 'erb'
require 'sanitize'
require 'aws/ses'

get '/contact' do
  erb :contact
end
	    </code></pre>
	  </section>
 
	  <section>
	    (we can rub some css on it later)
	  </section>

	</section>
	<section>
	
	  <section>
	    POSTing the data from the form
	  </section>

	  <section>
	    everything lives in params
	  </section>

	  <section>
	    into our app.rb
	    <pre><code data-trim>
post '/contact' do                                                              
  params.collect! do |param|                                                   
    Sanitize.clean(param)                                                      
  end                                                                          
                                                                                
  ses = AWS::SES::Base.new(                                                     
    :access_key_id  => 'id',                                                    
    :secret_access_key => 'key'                                                 
  )                                                                             
  ses.send_email(                                                               
    :to => EMAIL,                                                               
    :from => EMAIL,                                                             
    :subject => params[:mail] + " sent you a message",                          
    :body => "subject: " + params[:subject] + "\nname: " +                      
      params[:name] + "\n\n" + params[:body]                                    
  )                                                                             
                                                                                
  @name = params[:name]                                                         
  erb :success                                                                  
end
	    </code></pre>
	  </section>

	  <section>
	    views/success.erb
	    <pre><code data-trim>
Thanks for your email, &lt;%= @name =>!
	    </code></pre>
	  </section>

	  <section>
	    <img src="/img/A2jQ9.gif" alt="yeah fuck yeah"/>
	  </section>
	</section>

	<section>
	  <section>
	    <h2>Cool Sinatraisms</h2>
	  </section>

	  <section>
	    want to avoid verbose error messages?
	    <pre><code data-trim>
set :environment, :production
            </pre></code>
	  </section>

	  <section>
	    custom error messages
	    <pre><code data-trim>
not_found do
  "Oh no I do not know that path"
end

error do
  "I think I broke"
end
	    </pre></code>
	  </section>

	  <section>
	    want to serve static files?
	    <p class="fragment">stick them in public/ !</p>
	  </section>

	  <section>
	    want to serve from a custom directory?
	    <pre><code data-trim>
set :public_folder, '/customdirectory'
	    </code></pre>
	  </section>
	  <section>
	    want a more structured app and include tests and things?
	    <p class="fragment">
	      <a href="https://github.com/oren/sinatra-template">github.com/oren/sinatra-template</a>
	    </p>
	  </section>

	  <section>
	    <h2>Make more things!</h2>
	  </section>

	</section>

	<section>
	  <p>
	    <a href="http://edgecast.com">EdgeCast</a><br />
	  </p>
	  <p>
	    <a href="http://ladevops.org">ladevops.org</a> | 
	    <a href="http://js.la">js.la</a>
	  </p>
	  <p>
            <a href="http://twitter.com/lolcatstevens">@lolcatstevens</a> | 
	    <a href="http://github.com/flores">github.com/flores</a><br/>
	    <a href="mailto:carlo@js.la">carlo@js.la</a>
	  </p>
	  <h2 class="fragment roll-in">Thank you</h2>
	</section>
      </div>

    </div>

    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.min.js"></script>

    <script>

      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'linear', // default/cube/page/concave/zoom/linear/fade/none

        // Optional libraries used to extend on reveal.js
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
          // { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
        ]
      });

    </script>

  </body>
</html>
